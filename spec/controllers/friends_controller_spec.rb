require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FriendsController, type: :controller do
  describe 'GET #index' do
    let(:friendship_request) { create :friendship_request, status: :accepted }
    before :each do
      sign_in friendship_request.user
    end

    it 'assigns current_user as @users' do
      get :index
      expect(assigns(:user)).to eq friendship_request.user
    end
  end

  describe 'PATCH #relieve' do
    let(:friendship_request) { create :friendship_request }
    it 'call relieve method on user' do
      skip 'not sure why not working'
      patch :relieve, { id: friendship_request.friend.to_param }
      friendship_request.reload
      expect(friendship_request.status).to eq 'relieved'
    end
  end

end
